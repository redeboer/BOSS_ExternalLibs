//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4VPreCompoundFragment.icc,v 1.7 2008/09/22 10:18:36 ahoward Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//
// by V. Lara
//
// Modif (03 September 2008) by J. M. Quesada for external choice of inverse 
// cross section option 
// JMQ (06 September 2008) Also external choice has been added for:
//                      - superimposed Coulomb barrier (if useSICB=true) 

inline G4double G4VPreCompoundFragment::GetA() const 
{ 
  return theA;
}

inline G4double G4VPreCompoundFragment::GetZ() const 
{ 
  return theZ;
}

inline G4double G4VPreCompoundFragment::GetRestA() const 
{ 
  return theRestNucleusA;
}
    
inline G4double G4VPreCompoundFragment::GetRestZ() const 
{ 
  return theRestNucleusZ;
}
    
inline G4double G4VPreCompoundFragment::GetCoulombBarrier() const 
{
  return theCoulombBarrier;
}
    
inline G4double G4VPreCompoundFragment::GetBindingEnergy() const 
{
  return theBindingEnergy;
}

inline G4double G4VPreCompoundFragment::GetMaximalKineticEnergy() const 
{ 
  return theMaximalKineticEnergy;
}

inline G4double G4VPreCompoundFragment::GetEnergyThreshold() const 
{ 
  return theMaximalKineticEnergy - theCoulombBarrier;
}
    
inline G4double G4VPreCompoundFragment::GetEmissionProbability() const 
{ 
  return theEmissionProbability;
}

inline G4double G4VPreCompoundFragment::GetNuclearMass(void) const 
{
  return G4ParticleTable::GetParticleTable()->
      GetIonTable()->GetIonMass(static_cast<G4int>(theZ),static_cast<G4int>(theA));
}


inline G4double G4VPreCompoundFragment::GetRestNuclearMass() const 
{
  return G4ParticleTable::GetParticleTable()->GetIonTable()->
    GetIonMass(static_cast<G4int>(theRestNucleusZ),static_cast<G4int>(theRestNucleusA));
}


inline G4double G4VPreCompoundFragment::GetReducedMass() const 
{
  return GetRestNuclearMass()*GetNuclearMass()/
    (GetNuclearMass()+GetRestNuclearMass());
}


inline const G4LorentzVector G4VPreCompoundFragment::
GetMomentum() const 
{ 
  return theMomentum;
}

    
inline void G4VPreCompoundFragment::
SetMomentum(const G4LorentzVector & value) 
{ 
  theMomentum = value;
}
    
inline void G4VPreCompoundFragment::
SetFragmentName(const G4String& aName) 
{ 
  theFragmentName = aName; 
}

inline const G4String G4VPreCompoundFragment::
GetName() const 
{ 
  return theFragmentName; 
}
    
inline void G4VPreCompoundFragment::ResetStage()
{
  theStage = 1;
}

inline G4int G4VPreCompoundFragment::GetStage() const
{
  return theStage;
}

inline void G4VPreCompoundFragment::IncrementStage()
{
  theStage++;
}

//for inverse cross section choice
inline void G4VPreCompoundFragment::SetOPTxs(G4int opt)
{
  OPTxs=opt;
  return;
}

//for superimposed Coulomb Barrier for inverse cross sections
inline void G4VPreCompoundFragment::UseSICB(G4bool use)
{
  useSICB=use;
  return;
}
