//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// Hadronic Process: Nuclear De-excitations
// by V. Lara

inline G4FermiPhaseSpaceDecay::G4FermiPhaseSpaceDecay()
{
}

inline G4FermiPhaseSpaceDecay::~G4FermiPhaseSpaceDecay()
{
}

inline G4FermiPhaseSpaceDecay::G4FermiPhaseSpaceDecay(const G4FermiPhaseSpaceDecay&)
{
  // This is meant to not be used
}

inline const G4FermiPhaseSpaceDecay & 
G4FermiPhaseSpaceDecay::operator=(const G4FermiPhaseSpaceDecay&)
{
  //This is menat to not be used
  return *this;
}

inline G4bool 
G4FermiPhaseSpaceDecay::operator==(const G4FermiPhaseSpaceDecay&)
{
  // This is meant to not be used
  return false;
}

inline G4bool
G4FermiPhaseSpaceDecay::operator!=(const G4FermiPhaseSpaceDecay&)
{
  // This is meant to not be used
  return true;
}


inline G4double 
G4FermiPhaseSpaceDecay::PtwoBody(G4double E, G4double P1, G4double P2) const
{
  G4double P = (E+P1+P2)*(E+P1-P2)*(E-P1+P2)*(E-P1-P2)/(4.0*E*E);
  if (P>0.0) return std::sqrt(P);
  else return -1.0;
}


inline std::vector<G4LorentzVector*> * G4FermiPhaseSpaceDecay::
Decay(const G4double parent_mass, const std::vector<G4double>& fragment_masses) const
{
  //  if (fragment_masses.size() == 2)  
  //    {
  //      return this->TwoBodyDecay(parent_mass,fragment_masses);
  //    }
  //  else return this->NBodyDecay(parent_mass,fragment_masses);
  //  else 
  //    {
      return this->KopylovNBodyDecay(parent_mass,fragment_masses);
      //    }
}

inline G4double 
G4FermiPhaseSpaceDecay::BetaKopylov(const G4int K) const
{
  // Notice that alpha > beta always
  const G4double beta = 1.5;
  G4double alpha = 1.5*(K-1);
  G4double Y1 = CLHEP::RandGamma::shoot(alpha,1);
  G4double Y2 = CLHEP::RandGamma::shoot(beta,1);
  
  return Y1/(Y1+Y2);
}
