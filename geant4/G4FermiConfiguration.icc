//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// Hadronic Process: Nuclear De-excitations
// By V. Lara


inline G4FermiConfiguration::G4FermiConfiguration()
{
}

inline G4FermiConfiguration::~G4FermiConfiguration()
{
}


inline G4FermiConfiguration::G4FermiConfiguration(const G4FermiConfiguration &right)
  : Configuration(right.Configuration)
{
}


inline G4FermiConfiguration::G4FermiConfiguration(const std::vector<const G4VFermiFragment*>& conf)
  : Configuration(conf)
{ 
}

inline const G4FermiConfiguration & G4FermiConfiguration::
operator=(const G4FermiConfiguration & right)
{
  Configuration.clear();
  Configuration.reserve(right.Configuration.size());
  Configuration.insert(Configuration.begin(),right.Configuration.begin(),right.Configuration.end());
  return *this;
}


inline G4bool G4FermiConfiguration::operator==(const G4FermiConfiguration &right) const
{
  return (Configuration == right.Configuration);
}

inline G4bool G4FermiConfiguration::operator!=(const G4FermiConfiguration &right) const
{
  return (Configuration != right.Configuration);
}

inline void G4FermiConfiguration::
SetConfiguration(const std::vector<const G4VFermiFragment*>& conf)
{
  Configuration.clear();
  Configuration = conf;
  return;
}

inline G4int G4FermiConfiguration::
GetNumberOfFragments() const
{
  return Configuration.size();
}
