//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: CHIPS.icc,v 1.7 2009/11/20 16:49:03 mkossov Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//
//---------------------------------------------------------------------------
//
// ClassName:   CHIPS
//
// Author: 2009 M.Kosov (based on QGSC_BERT, but without BERT)
//
// Modified:
//
//----------------------------------------------------------------------------
//
#include "globals.hh"
#include "G4ParticleDefinition.hh"
#include "G4ParticleWithCuts.hh"
#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"

#include "G4Material.hh"
#include "G4MaterialTable.hh"
#include "G4ios.hh"
#include <iomanip>   

#include "G4DecayPhysics.hh"
#include "G4EmStandardPhysics.hh"
//#include "G4QAtomicPhysics.hh"
#include "G4QPhotoNuclearPhysics.hh"
#include "G4QNeutrinoPhysics.hh"
#include "G4IonPhysics.hh"
#include "G4QCaptureAtRestPhysics.hh"
#include "G4HadronQElasticPhysics.hh"
#include "G4NeutronTrackingCut.hh"

#include "G4DataQuestionaire.hh"
#include "HadronPhysicsCHIPS.hh"

template<class T> TCHIPS<T>::TCHIPS(G4int ver):  T()
{
  // default cut value  (1.0mm) 
  // defaultCutValue = 1.0*mm;
  G4DataQuestionaire it(photon);
  G4cout << "<<< Geant4 Physics List simulation engine: CHIPS 1.0"<<G4endl;
  G4cout <<G4endl<<G4endl;
  this->defaultCutValue = 0.7*mm;  
  this->SetVerboseLevel(ver);

  // EM Physics
  //this->RegisterPhysics( new G4QAtomicPhysics(ver));
  this->RegisterPhysics( new G4EmStandardPhysics(ver));

  // Synchroton Radiation & Photo-Nuclear Physics
  this->RegisterPhysics( new G4QPhotoNuclearPhysics("photo-nuclear"));

  // Neutrino-Nuclear Physics
  this->RegisterPhysics( new G4QNeutrinoPhysics("weak"));

  // Decays
  this->RegisterPhysics( new G4DecayPhysics("decay",ver) );

   // Hadron Elastic scattering, "CHIPS" version (to be replaced by G4QElasticPhysics)
  this-> RegisterPhysics( new G4HadronQElasticPhysics("elastic",ver));

   // Hadron Physics (to be replaced by G4QInelasticPhysics)
  this->RegisterPhysics(  new HadronPhysicsCHIPS("inelastic"));

  // Stopping Physics
  this->RegisterPhysics( new G4QCaptureAtRestPhysics("nuclear_capture",ver));

  // Ion Physics
  this->RegisterPhysics( new G4IonPhysics("ion"));
  
  // Neutron tracking cut
  this->RegisterPhysics( new G4NeutronTrackingCut("Neutron tracking cut", ver));

}

template<class T> TCHIPS<T>::~TCHIPS() {}

template<class T> void TCHIPS<T>::SetCuts()
{
  if (this->verboseLevel >1) G4cout << "CHIPS::SetCuts:"; 
  //  " G4VUserPhysicsList::SetCutsWithDefault" method sets 
  //   the default cut value for all particle types 

  this->SetCutsWithDefault();   
  
//  if (this->verboseLevel >0)
//    G4VUserPhysicsList::DumpCutValuesTable();  
  
}

