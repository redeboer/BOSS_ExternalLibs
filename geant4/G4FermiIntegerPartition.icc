//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// Hadronic Process: Nuclear De-excitations
// by V. Lara

inline G4FermiIntegerPartition::G4FermiIntegerPartition()
  : total(0), enableNull(false)
{
}

inline G4FermiIntegerPartition::~G4FermiIntegerPartition()
{
}

inline G4FermiIntegerPartition::G4FermiIntegerPartition(const G4FermiIntegerPartition& right)
  : total(right.total), enableNull(right.enableNull), partition(right.partition)
{
}


inline const G4FermiIntegerPartition&
G4FermiIntegerPartition::operator=(const G4FermiIntegerPartition& right)
{
  total=right.total;
  enableNull=right.enableNull;
  partition=right.partition;
  return *this;
}

inline G4bool G4FermiIntegerPartition::
operator==(const G4FermiIntegerPartition& right)
{
  return (total == right.total &&
	  enableNull == enableNull &&
	  partition == right.partition);
}

inline G4bool G4FermiIntegerPartition::
operator!=(const G4FermiIntegerPartition& right)
{
  return (total != right.total ||
	  enableNull != right.enableNull ||
	  partition != right.partition);
}

inline std::vector<G4int> G4FermiIntegerPartition::
GetPartition() const
{
  return partition;
}

inline void G4FermiIntegerPartition::
EnableNull(const G4bool v)
{
  enableNull=v;
  return;
}

#ifdef G4FermiIntegerPartition_debug

inline G4int G4FermiIntegerPartition::GetSum()
{
  return std::accumulate(partition.begin(), partition.end(), 0);
}

#endif

