//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4LPhysicsFreeVector.icc,v 1.14 2009/06/25 10:05:26 vnivanch Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//
// 
// ------------------------------------------------------------------
//
// Class G4LPhysicsFreeVector -- source file
//
// Derived from base class G4PhysicsVector
// This is a free vector for Low Energy Physics cross section data.
// The class name includes an "L" to distinguish it from other groups
// who may wish to implement a free vector in a different way.
// A subdivision method is used to find the energy|momentum bin.
//
// F.W. Jones, TRIUMF, 04-JUN-96
// --------------------------------------------------------------------------

inline
void G4LPhysicsFreeVector::PutValues(size_t binNumber,
                                     G4double binValue, G4double dataValue)
  // G4PhysicsVector has PutValue() but it is inconvenient.
  // Want to simultaneously fill the bin and data vectors.
{
   binVector[binNumber] = binValue;
   dataVector[binNumber] = dataValue;
   if(binNumber == 0)
     { edgeMin = binValue; }
   else if( numberOfNodes - 1 == binNumber)
     { edgeMax = binValue; }
}

inline
void G4LPhysicsFreeVector::SetVerboseLevel(G4int value)
{
   verboseLevel = value;
}

inline
G4int G4LPhysicsFreeVector::GetVerboseLevel(G4int)
{
   return verboseLevel;
}

inline
G4double G4LPhysicsFreeVector::GetLastEnergy()
{
   return lastEnergy;
}

inline
size_t G4LPhysicsFreeVector::GetLastBin()
{
   return lastBin;
}

inline 
size_t G4LPhysicsFreeVector::FindBinLocation(G4double theEnergy) const
{
   G4int n1 = 0;
   G4int n2 = numberOfNodes/2;
   G4int n3 = numberOfNodes - 1;
   while (n1 != n3 - 1)
   {
      if (theEnergy > binVector[n2])
         { n1 = n2; }
      else
         { n3 = n2; }
      n2 = n1 + (n3 - n1 + 1)/2;
   }
#ifdef G4VERBOSE
   if (verboseLevel > 1)
   {
     G4cout << "G4LPhysicsFreeVector::FindBinLocation:  returning "
            << n1 << G4endl;
   }
#endif
   return (size_t)n1;
}
