//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4ParticleDefinition.icc,v 1.14 2009/03/27 20:33:50 gum Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//

inline 
 G4ParticleTable* G4ParticleDefinition::GetParticleTable()
{ 
  return theParticleTable; 
}

inline
 G4DecayTable* G4ParticleDefinition::GetDecayTable()
{ 
  return theDecayTable; 
}

inline
 void          G4ParticleDefinition::SetDecayTable(G4DecayTable* aDecayTable) 
{ 
  theDecayTable = aDecayTable; 
}


inline 
 void G4ParticleDefinition::SetVerboseLevel(G4int value)
{
   verboseLevel = value;
}

inline 
 G4int G4ParticleDefinition::GetVerboseLevel() const
{
   return verboseLevel;
}

inline
 G4ProcessManager* G4ParticleDefinition::GetProcessManager() const
{
    return theProcessManager;
}

inline
 void G4ParticleDefinition::SetProcessManager(G4ProcessManager *aProcessManager)
{
      theProcessManager = aProcessManager;
}

inline
 G4int G4ParticleDefinition::GetQuarkContent(G4int flavor) const 
{
  G4int content = 0; 
  if ((flavor>0) && (flavor<=NumberOfQuarkFlavor)){
    content = theQuarkContent[flavor-1];
  }else {
#ifdef G4VERBOSE
    if (verboseLevel >0) {
      G4cout << "Invalid Quark Flavor for G4ParticleDefinition::GetQuarkContent";
      G4cout << ": flavor=" << flavor <<G4endl;
    }	
#endif	
  }
  return content;  
}

inline
 G4int G4ParticleDefinition::GetAntiQuarkContent(G4int flavor) const 
{
  G4int content = 0;
  if ((flavor>0) && (flavor<=NumberOfQuarkFlavor)){
    content = theAntiQuarkContent[flavor-1];
  }else {
#ifdef G4VERBOSE
    if (verboseLevel >0) {
      G4cout <<"Invalid Quark Flavor for G4ParticleDefinition::GetAntiQuarkContent";
      G4cout << ": flavor=" << flavor <<G4endl;
    }
#endif
  }  
  return content;
}


inline 
 void G4ParticleDefinition::SetParticleSubType(const G4String& subtype)
{
  theParticleSubType = subtype;
}
 
inline 
 void             G4ParticleDefinition::SetAntiPDGEncoding(G4int aEncoding)
{ 
  theAntiPDGEncoding = aEncoding; 
}

inline 
G4bool G4ParticleDefinition::GetApplyCutsFlag() const
{
  return fApplyCutsFlag;
}

inline
 void G4ParticleDefinition::SetAtomicNumber(G4int i)
{
  theAtomicNumber = i;
}

inline
 G4int G4ParticleDefinition::GetAtomicNumber() const
{
  return theAtomicNumber;
}

inline
 void G4ParticleDefinition::SetAtomicMass(G4int i)
{
  theAtomicMass = i;
}

inline
 G4int G4ParticleDefinition::GetAtomicMass() const
{
  return theAtomicMass;
}

inline 
  void  G4ParticleDefinition::SetPDGMagneticMoment(G4double magneticMoment)
{
   thePDGMagneticMoment = magneticMoment;
}

inline
  G4double G4ParticleDefinition::CalculateAnomaly()  const
{
   // gives the anomaly of magnetic moment for spin 1/2 particles 
   if (thePDGiSpin==1) {
     G4double muB = 0.5*eplus*hbar_Planck/(thePDGMass/c_squared);
     return 0.5*std::fabs(thePDGMagneticMoment/muB - 2.*thePDGCharge/eplus);   
   } else {	
     return 0.0;
   }
}
