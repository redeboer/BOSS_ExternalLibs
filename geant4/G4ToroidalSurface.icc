//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4ToroidalSurface.icc,v 1.4 2006/06/29 18:41:03 gunter Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4ToroidalSurface.icc
//
// Implementation of inline methods of G4ToroidalSurface
// --------------------------------------------------------------------

inline
G4String G4ToroidalSurface::GetEntityType() const
{
  return G4String("Toroidal_Surface");
}

inline
G4Vector3D G4ToroidalSurface::GetDirection() const
{
  return Placement.GetRefDirection();
}

inline
G4Vector3D G4ToroidalSurface::GetAxis() const
{
  return Placement.GetAxis();
}

inline
G4Point3D G4ToroidalSurface::GetLocation() const
{
  return Placement.GetLocation();
}

inline
G4double G4ToroidalSurface::GetMinRadius() const
{
  return MinRadius;
}

inline G4double G4ToroidalSurface::GetMaxRadius() const
{
  return MaxRadius;
}

inline
void G4ToroidalSurface::MultiplyPointByMatrix(G4Point3D& Base)
{
  Base.setX((Base.x() * TransMatrix->get(0,0)) + 
	    (Base.y() * TransMatrix->get(1,0)) + 
	    (Base.z() * TransMatrix->get(2,0)));
  Base.setY((Base.x() * TransMatrix->get(0,1)) + 
	    (Base.y() * TransMatrix->get(1,1)) + 
	    (Base.z() * TransMatrix->get(2,1)));
  Base.setZ((Base.x() * TransMatrix->get(0,2)) + 
	    (Base.y() * TransMatrix->get(1,2)) + 
	    (Base.z() * TransMatrix->get(2,2)));
}

inline
void G4ToroidalSurface::MultiplyVectorByMatrix(G4Vector3D& DCos)
{
  G4double w;
  DCos.setX((DCos.x() * TransMatrix->get(0,0)) + 
	    (DCos.y() * TransMatrix->get(1,0)) + 
	    (DCos.z() * TransMatrix->get(2,0)) + TransMatrix->get(3,0));

  DCos.setY((DCos.x() * TransMatrix->get(0,1)) + 
	    (DCos.y() * TransMatrix->get(1,1)) + 
	    (DCos.z() * TransMatrix->get(2,1)) + TransMatrix->get(3,1));

  DCos.setY((DCos.x() * TransMatrix->get(0,2)) + 
	    (DCos.y() * TransMatrix->get(1,2)) + 
	    (DCos.z() * TransMatrix->get(2,2)) + TransMatrix->get(3,2));
  
  w      = ((DCos.x() * TransMatrix->get(0,3)) + 
	    (DCos.y() * TransMatrix->get(1,3)) + 
	    (DCos.z() * TransMatrix->get(2,3)) + TransMatrix->get(3,3));
    
  if (w != 0.0) 
  {
    DCos.setX(DCos.x() / w);  
    DCos.setY(DCos.y() / w); 
    DCos.setZ(DCos.z() / w);
  }
}

inline
G4int G4ToroidalSurface::IsZero(G4double x) const
{
  if((x) > -EQN_EPS && (x) < EQN_EPS) 
    return 1;
  else return 0;
}
