//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4BezierSurface.icc,v 1.4 2006/06/29 18:38:22 gunter Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4BezierSurface.icc
//
// Implementation of inline methods of G4BezierSurface
// --------------------------------------------------------------------

inline
G4Point3D G4BezierSurface::AveragePoint() const
{
  return average_pt;
}

inline
void G4BezierSurface::SetAveragePoint(G4Point3D p)
{
  average_pt=p;
}

inline
G4double G4BezierSurface::UAverage() const
{
  return average_u;
}

inline
G4double G4BezierSurface::VAverage() const
{
  return average_v;
}

inline
void G4BezierSurface::Dir(G4int d)
{
  dir=d;
}

inline
void G4BezierSurface::ChangeDir()
{
  dir=!dir;
}

inline
G4double G4BezierSurface::SMin() const
{
  return smin;
}

inline
G4double G4BezierSurface::SMax() const
{
  return smax;
}

inline
G4int G4BezierSurface::GetOrder(G4int direction) const
{
  return order[direction];
}

inline
void G4BezierSurface::PutOrder(G4int direction, G4int value)
{
  order[direction]=value;
}

inline
G4double G4BezierSurface::GetU() const
{
  return (u_min + u_max)/2.0;
}

inline
G4double G4BezierSurface::GetV() const
{
  return (v_min + v_max)/2.0;
}

inline
void G4BezierSurface::LocalizeClipValues()
{
  if ( dir == ROW)
  {
    smin = (1.0 - smin) * u_knots->GetKnot(0) +
      smin * u_knots->GetKnot(u_knots->GetSize() - 1);
    smax = (1.0 - smax) * u_knots->GetKnot(0) +
      smax * u_knots->GetKnot(u_knots->GetSize() - 1);
  }
  else
  {
    smin = (1.0 - smin) * v_knots->GetKnot(0) +
      smin * v_knots->GetKnot(v_knots->GetSize() - 1);
    smax = (1.0 - smax) * v_knots->GetKnot(0) +
      smax * v_knots->GetKnot(v_knots->GetSize() - 1);
  }  
}

inline
G4double G4BezierSurface::Findzero(G4double x0, G4double x1,
                                   G4double y0, G4double y1) const
{
  return(x0 - y0 * ( x1 - x0) / (y1-y0));
}
  
inline
G4int G4BezierSurface::Sign(G4double a)	const
{
  return ((a < 0.0)? -1 : 1);
}

inline
G4int G4BezierSurface::Amax(G4int i, G4int j) const
{
  return( (i) > (j) ? (i) : (j) );
}

inline
G4int G4BezierSurface::Amin(G4int i, G4int j) const
{
  return( (i) < (j) ? (i) : (j) );
}
	
inline
G4int G4BezierSurface::AhIndex(G4int j, G4int t, G4int iorder) const
{
  return(( (j) * ((j)+1)/2) + (t) - ((iorder-1) - (j)));
}
