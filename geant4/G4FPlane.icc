//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4FPlane.icc,v 1.6 2006/06/29 18:39:32 gunter Exp $
// GEANT4 tag $Name: geant4-09-03-patch-01 $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4FPlane.icc
//
// Implementation of inline methods of G4FPlane
// --------------------------------------------------------------------

inline
G4int G4FPlane::GetConvex() const
{
  return Convex;
}

inline
void G4FPlane::Deactivate()
{
  active=0;
}

inline
G4int G4FPlane::GetNumberOfPoints() const
{
  return (surfaceBoundary.GetNumberOfPoints());
}

inline
G4Point3D G4FPlane::GetSrfPoint() const
{
  return pplace.GetLocation();
}

inline
const G4Point3D& G4FPlane::GetPoint(G4int Count) const
{
  return surfaceBoundary.GetPoint(Count);
}  

inline
const G4Point3D& G4FPlane::GetHitPoint() const
{
  return hitpoint;
}

inline
G4Ray* G4FPlane::Norm()
{
  return NormalX;
}

inline
G4Vector3D G4FPlane::SurfaceNormal(const G4Point3D&) const 
{
  return NormalX->GetDir();
}

inline
const char* G4FPlane::Name() const
{
  return "G4FPlane";
}

inline
G4Axis2Placement3D G4FPlane::GetPplace() const
{
  return  pplace;
}

inline
G4Plane G4FPlane::GetPplane() const
{
  return  Pl;
}

inline
G4int G4FPlane::MyType() const
{
  return 1;
}

inline 
G4int G4FPlane::Sign(G4double a) const
{
  register G4int i=1; 
  if(a<0) 
    i= -1;
  return i;
} 
