// -*- C++ -*-
// $Id: SphericalNeumann.icc,v 1.2.4.1 2005/03/18 22:26:23 garren Exp $
#include "CLHEP/GenericFunctions/Sin.hh"
#include "CLHEP/GenericFunctions/Cos.hh"
#include "CLHEP/GenericFunctions/Variable.hh"
#include "gsl/gsl_sf_bessel.h"
#include <signal.h>

namespace Genfun {

FUNCTION_OBJECT_IMP(SphericalNeumann)

//----------------------------------------------------------------------------------//
// Implementation notes:  The Spherical Neumann function is implemented in terms of //
// lower order spherical neumann functions.  This is possible thanks to a recursion //
// relation.                                                                        //
//----------------------------------------------------------------------------------//

inline
SphericalNeumann::SphericalNeumann(unsigned int l):
  _l(l)
{
  create();
}

inline
SphericalNeumann::~SphericalNeumann() {
  delete _function;
}

inline
SphericalNeumann::SphericalNeumann(const SphericalNeumann & right):
_l(right._l)
{
  create();
}

inline
double SphericalNeumann::operator() (double x) const {
  //
  // First try the GSL implementation:
  //
  gsl_sf_result result;
  int status =gsl_sf_bessel_yl_e(_l, x,&result);
  if (status!=0) {
    std::cerr << "Warning, GSL function gsl_sf_bessel_yl_impl" 
	      << " return code" << status << std::endl;
    raise(SIGFPE);
  }
  return result.val;
  //return (*_function)(x);
}

inline
unsigned int SphericalNeumann::l() const {
  return _l;
}

inline
void SphericalNeumann::create() {
  Sin   sine;
  Cos cosine;
  Variable     x;
  if (_l==0) {
    _function = (-cosine/x).clone();
  }
  else if (_l==1) {
    _function = (-cosine/x/x - sine/x).clone();
  }
  else {
    SphericalNeumann j_minus(_l-1);
    SphericalNeumann j_minus_minus(_l-2);
    _function = ((2*_l-1)*j_minus/x - j_minus_minus).clone();;
  }
} 

} // end of namespace Genfun 
