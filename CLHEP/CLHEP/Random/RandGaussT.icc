// $Id: RandGaussT.icc,v 1.2.4.1 2005/03/18 22:26:48 garren Exp $
// -*- C++ -*-
//
// -----------------------------------------------------------------------
//                             HEP Random
//                         --- RandGaussT ---
//                 inlined functions implementation file
// -----------------------------------------------------------------------
// This file is part of Geant4 (simulation toolkit for HEP).
 
// =======================================================================
// M. Fischler	  - Created: 04 Feb, 2000
//
// M. Fischler    - Modified fire() to use local engine, not getTheEngine()
//		    12/13/04
// =======================================================================

// Constructors
// ------------

namespace CLHEP {

RandGaussT::RandGaussT(HepRandomEngine & anEngine, double mean,
                                                        double stdDev )
: RandGauss(anEngine, mean, stdDev) {}

RandGaussT::RandGaussT(HepRandomEngine * anEngine, double mean,
                                                        double stdDev )
: RandGauss(anEngine, mean, stdDev) {}

// Getting a Gaussian deviate - static methods
// -------------------------------------------

double RandGaussT::shoot()
{
  HepRandomEngine* anEngine = HepRandom::getTheEngine();
  return HepStat::flatToGaussian (anEngine->flat());
}

double RandGaussT::shoot( HepRandomEngine* anotherEngine )
{ 
  return HepStat::flatToGaussian  (anotherEngine->flat());
}

double RandGaussT::shoot(double mean, double stdDev) {
  return shoot()*stdDev + mean;
}

double RandGaussT::shoot(HepRandomEngine* anotherEngine,
                                  double mean, double stdDev) {
  return shoot(anotherEngine)*stdDev + mean;
}

// Getting a Gaussian deviate - instance methods
// ---------------------------------------------

double RandGaussT::fire() {
  return HepStat::flatToGaussian(localEngine->flat()) * defaultStdDev 
								+ defaultMean;
}

double RandGaussT::fire(double mean, double stdDev) {
  return HepStat::flatToGaussian(localEngine->flat()) * stdDev + mean;
}


}  // namespace CLHEP
